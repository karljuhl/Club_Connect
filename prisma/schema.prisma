generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_DIRECT_URL")
}

model OpenAIConfig {
  id           String   @id @default(cuid())
  userId       String   @unique
  globalAPIKey String
  createdAt    DateTime @default(now()) @map("created_at")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ChatbotFiles {
  id         String   @id @default(cuid())
  assignedAt DateTime @default(now())
  chatbotId  String
  fileId     String
  chatbot    Chatbot  @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  file       File     @relation(fields: [fileId], references: [id], onDelete: Cascade)
}

model ChatbotErrors {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now()) @map("created_at")
  errorMessage String
  threadId     String
  chatbotId    String
  chatbot      Chatbot  @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
}

model Integration {
  id           String   @id @default(cuid())
  userId       String
  platform     String
  platformId   String 
  accessToken  String
  Chatbot      Chatbot[]
  connected    Boolean  @default(false)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, platform])
  @@map("integrations")
}

model Chatbot {
  id                              String            @id @default(cuid())
  name                            String
  userId                          String
  openaiId                        String
  createdAt                       DateTime          @default(now()) @map("created_at")
  openaiKey                       String
  modelId                         String?
  prompt                          String?
  welcomeMessage                  String
  chatbotErrorMessage             String            @default("Oops! An error has occurred. If the issue persists, feel free to reach out to our support team for assistance. We're here to help!")
  isImported                      Boolean           @default(false)
  displayBranding                 Boolean           @default(true)
  chatTitle                       String            @default("Chat with us")
  chatMessagePlaceHolder          String            @default("Type a message...")
  bubbleColor                     String            @default("#FFFFFF")
  bubbleTextColor                 String            @default("#000000")
  chatHeaderBackgroundColor       String            @default("#FFFFFF")
  chatHeaderTextColor             String            @default("#000000")
  chatbotReplyBackgroundColor     String            @default("#e4e4e7")
  chatbotReplyTextColor           String            @default("#000000")
  userReplyBackgroundColor        String            @default("#3b82f6")
  userReplyTextColor              String            @default("#FFFFFF")
  chatbotLogoURL                  String?
  assistantImageBackgroundColor   String?           @default("#000000")
  inquiryEnabled                  Boolean           @default(false)
  inquiryLinkText                 String            @default("Contact our support team")
  inquiryTitle                    String            @default("Contact our support team")
  inquirySubtitle                 String            @default("Our team is here to help you with any questions you may have. Please provide us with your email and a brief message so we can assist you.")
  inquiryEmailLabel               String            @default("Email")
  inquiryMessageLabel             String            @default("Message")
  inquirySendButtonText           String            @default("Send message")
  inquiryAutomaticReplyText       String            @default("Your inquiry has been sent. Our team will get back to you shortly.")
  inquiryDisplayLinkAfterXMessage Int               @default(1)
  ChatbotErrors                   ChatbotErrors[]
  ChatbotFiles                    ChatbotFiles[]
  ClientInquiries                 ClientInquiries[]
  Integrations                    Integration[]
  model                           ChatbotModel?     @relation(fields: [modelId], references: [id])
  user                            User              @relation(fields: [userId], references: [id])

  @@map("chatbots") 
}

model File {
  id           String         @id @default(cuid())
  userId       String
  name         String
  openAIFileId String         @unique
  createdAt    DateTime       @default(now()) @map("created_at")
  blobUrl      String
  crawlerId    String?
  ChatbotFiles ChatbotFiles[]
  crawler      Crawler?       @relation(fields: [crawlerId], references: [id], onDelete: Cascade)
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("files")
}

model ChatbotModel {
  id      String    @id @default(cuid())
  name    String
  Chatbot Chatbot[]

  @@map("models")
}

model ClientInquiries {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  threadId  String
  email     String
  inquiry   String
  chatbotId String
  deletedAt DateTime?
  chatbot   Chatbot   @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
}

model Message {
  id        String   @id @default(cuid())
  message   String
  createdAt DateTime @default(now()) @map("created_at")
  response  String
  threadId  String   @default("")
  from      String   @default("unknown")
  userId    String
  chatbotId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Crawler {
  id              String   @id @default(cuid())
  name            String
  createdAt       DateTime @default(now()) @map("created_at")
  userId          String
  crawlUrl        String
  urlMatch        String
  selector        String
  maxPagesToCrawl Int
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  File            File[]

  @@map("crawlers")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  provider           String
  providerAccountId  String
  type               String
  access_token       String? @db.Text
  refresh_token      String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  
  user               User     @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                     String        @id @default(cuid())
  name                   String?
  email                  String?       @unique
  emailVerified          DateTime?
  image                  String?
  createdAt              DateTime      @default(now()) @map("created_at")
  inquiryEmailEnabled    Boolean       @default(true)
  stripeCurrentPeriodEnd DateTime?     @map("stripe_current_period_end")
  stripeCustomerId       String?       @unique @map("stripe_customer_id")
  stripePriceId          String?       @map("stripe_price_id")
  stripeSubscriptionId   String?       @unique @map("stripe_subscription_id")
  accounts               Account[]
  OpenAIConfig           OpenAIConfig?
  sessions               Session[]
  Chatbot                Chatbot[]
  Crawler                Crawler[]
  File                   File[]
  Message                Message[]
  Integrations           Integration[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
